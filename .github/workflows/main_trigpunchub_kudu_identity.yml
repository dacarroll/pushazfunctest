# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Functions

on:
  push:
    branches:
      - main
      - feature/functions
    paths:
      - 'Functions/**'

jobs:
  publish_functions:
    env:
      commitmsg: ${{ github.event.head_commit.message }}
    runs-on: self-hosted
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 'File Differences'
        shell: pwsh
        run: |
          # Checking if first run
          if (!(Test-Path $env:RUNNER_TOOL_CACHE\FuncCommits\lstwkflowcmt.txt)) {
            New-Item $env:RUNNER_TOOL_CACHE\FuncCommits\lstwkflowcmt.txt -Force

            # Since first run checking last 3 commits for commit changes
              $Commits = git log -n 3 -- ./Functions | Select-String "commit \w*"
              $Commits = $Commits | foreach { $PSItem.Matches.Value.split(" ")[1] }
              $ChangedFiles = git diff --name-only $Commits[0] $Commits[2]

            # Finally writting current commit to history for all subsequent runs
              $Commits[0] >> $env:RUNNER_TOOL_CACHE\FuncCommits\lstwkflowcmt.txt
          }
          else {
            # Not first run collecting last commit from file 
            $Commit = Get-Content $env:RUNNER_TOOL_CACHE\FuncCommits\lstwkflowcmt.txt
            $ChangedFiles = git diff --name-only $env:GITHUB_SHA $Commit -- ./Functions

            $env:GITHUB_SHA > $env:RUNNER_TOOL_CACHE\FuncCommits\lstwkflowcmt.txt
          }

          # Setting all function apps with changes to the environment
          if ($ChangedFiles) {
            $ChangeFiles | Foreach { Write-Output ("Files Changed: {0}" -f $PSItem) }
            $Apps = $ChangedFiles | foreach { $PSItem.Split('/')[1] }
            $Functions_ToUpdate = $Apps | select -Unique
            $Functions_ToUpdate | Foreach { Write-Output ("Updating Function App: {0} " -f $PSItem) }
            "Functions_Update=$Functions_ToUpdate" >> $env:GITHUB_ENV
          }

      - name: 'Show Environment'
        shell: pwsh
        run: |
          dir env:
          ("The Change is in {0}" -f $env:commitmsg.split(" ")[0])


      - name: 'Run Az Login'
        shell: pwsh
        run: |
          Connect-AzAccount -Identity

      - name: 'Custom Kudu'
        shell: pwsh
        run: |
          # Prep Environment for Zip Operation
          try { Add-Type -AssemblyName System.IO.Compression.FileSystem } catch { Break }
          # Generate and access token
          try { $token = (Get-AzAccessToken).token } catch { Break }

          if ($token) {
            $functionApps_str = $env:Functions_Update
            $functionApps = $functionApps_str.Split(" ")
            foreach ($functionApp in $functionApps) {
              $functionURL = [string]::concat('https://',$functionApp,'.scm.azurewebsites.net/zipdeploy')
              
              $urlzip = $functionURL
              
              $applocation = [string]::concat($env:GITHUB_WORKSPACE,'\','Functions\',$functionApp)
              $zipOutput = [string]::concat($env:RUNNER_TEMP,'\',$functionApp,'.zip')
              [System.IO.Compression.ZipFile]::CreateFromDirectory($applocation,$zipOutput)
              $invoke_params = @{
                Uri = $urlzip 
                Headers = @{Authorization="Bearer $token"} 
                UserAgent = 'powershell/1.0'
                Method = 'PUT'
                InFile = $zipOutput 
                ContentType = "multipart/form-data"
              }
              try { Invoke-WebRequest @invoke_params -Verbose -UseBasicParsing }
              catch { $_ }
            }
          }
